#!/usr/bin/env php
<?php
// === OPS SHARED LIBRARY (PHP) v2.0 ===

// === Generated libraries classes ===



// [REMOVED] namespace App\Enum;

class CommandEnum
{
    // === this app commands ===
    const HELP = 'help';
    const RELEASE = 'release';
    const VERSION = 'version';
    // === ops commands ===
    const BRANCH = 'branch';
    const REPOSITORY = 'repository';
    const HEAD_COMMIT_ID = 'head-commit-id';
    const HOME_DIR = 'home-dir';
    const SCRIPT_DIR = 'script-dir';
    const WORKING_DIR = 'working-dir';
    const REPLACE_TEXT_IN_FILE = 'replace-text-in-file';
    const HANDLE_CACHES_AND_GIT = 'handle-caches-and-git';
    const SLACK = 'slack';
    // === ops private commands ===
    const GET_S3_WHITE_LIST_IPS_DEVELOPMENT = 'get-s3-white-list-ips-develop';
    const UPDATE_GITHUB_TOKEN_ALL_PROJECT = 'update-github-token-all-project';


    /**
     * @var array
     * key => value | key is command, value is description
     */
    const SUPPORT_COMMANDS = [
        self::HELP => 'show list support command and usage',
        self::RELEASE => 'combine all PHP files into \'_ops/lib\'',
        self::VERSION => 'show app version',
        //
        self::BRANCH => 'get git branch / GitHub branch',
        self::REPOSITORY => 'get GitHub repository name',
        self::HEAD_COMMIT_ID => 'get head commit id of branch',
        self::HOME_DIR => 'return home directory of machine / server',
        self::SCRIPT_DIR => 'return directory of script',
        self::WORKING_DIR => 'get root project directory / current working directory',
        self::REPLACE_TEXT_IN_FILE => 'php _ops/lib replace-text-in-file "search text" "replace text" "file path"',
        self::HANDLE_CACHES_AND_GIT => 'handle GitHub repository in caches directory',
        self::SLACK => 'notify a message to Slack',
        // private
        self::GET_S3_WHITE_LIST_IPS_DEVELOPMENT => '[PRIVATE] get S3 whitelist IPs to add to AWS Policy',
        self::UPDATE_GITHUB_TOKEN_ALL_PROJECT => '[PRIVATE] update token all projects in workspace',
    ];
}

// [REMOVED] namespace App\Enum;

class GitHubEnum
{
    public const REPOSITORY_DIR_COMMAND = 'git rev-parse --show-toplevel';
    public const RESET_BRANCH_COMMAND = 'git reset --hard HEAD'; // rollback all changing
    public const GET_BRANCH_COMMAND = "git symbolic-ref HEAD | sed 's/refs\/heads\///g'";
    public const PULL_COMMAND = 'git pull'; // get the newest code
    public const ADD_ALL_FILES_COMMAND = 'git add -A';
    public const PUSH_COMMAND = 'git push';
    public const GET_REMOTE_ORIGIN_URL_COMMAND = 'git config --get remote.origin.url';
    public const GET_REPOSITORY_DIR_COMMAND = 'git rev-parse --show-toplevel';
    public const GET_HEAD_COMMIT_ID_COMMAND = 'git rev-parse --short HEAD';
}

// [REMOVED] namespace App\Helpers;

class DEVHelper
{
    /**
     * get class name only, usage   DEVHelper::name(__CLASS__)
     *
     * @param string|null $classPath
     * @return string
     */
    public static function name(string $classPath = null): string
    {
        $pathArr = $classPath ? explode('\\', $classPath) : [];
        return end($pathArr);
    }

    /**
     * more detail with class and function name
     * use:
     *      DEVHelper::message($message, __CLASS__, __FUNCTION__);
     *
     * @param string $message
     * @param string|null $classPath
     * @param string|null $function
     * @return string
     */
    public static function message(string $message, string $classPath = null, string $function = null): string
    {
        return sprintf("[%s > %s]    %s", self::name($classPath), $function, $message);
    }
}

// [REMOVED] namespace App\Helpers;

class DirHelper
{
    /**
     * get home directory / get root directory of user
     * @return string
     */
    public static function getHomeDir(): string
    {
        return $_SERVER['HOME'];
    }

    public static function getWorkingDir(): string
    {
        return $_SERVER['PWD'];
    }

    /**
     * get current working directory of script
     * @return string
     */
    public static function getScriptDir(): string
    {
        return str_replace('/' . basename($_SERVER['SCRIPT_FILENAME']), '', sprintf("%s/%s", self::getWorkingDir(), $_SERVER['SCRIPT_FILENAME']));
    }

    // backup code
//    public static function getRepositoryDir()
//    {
//        return exec('git rev-parse --show-toplevel');
//    }
}

// [REMOVED] namespace App\Helpers;

class OpsHelper
{
    public static function getS3WhiteListIpsDevelopment(): string
    {

        $NEXLE_IPS = [
            '115.73.208.177', // Nexle VPN
            '115.73.208.182', // Nexle HCM office - others
            '115.73.208.183', // Nexle HCM office - others
            '14.161.25.117', // Nexle HCM office - others
            '118.69.176.228', // Nexle DN office
        ];
        $GITHUB_RUNNER_SERVER_IP = '18.167.126.148';
        $EC2DevelopIp = exec("echo $(curl https://develop-api.engageplus.io/api/booking/IP-QYIa20HxwQ)");
        $EC2StagingIp = exec("echo $(curl https://staging-api.engageplus.io/api/booking/IP-QYIa20HxwQ)");
        //
        $S3_WHITELIST_IP_DEVELOPMENT = array_merge($NEXLE_IPS, [
            $GITHUB_RUNNER_SERVER_IP,
            $EC2DevelopIp,
            $EC2StagingIp
        ]);
        //
        return sprintf("\n\n%s\n\n", json_encode($S3_WHITELIST_IP_DEVELOPMENT));
    }

    public static function updateGitHubTokenAllProjects()
    {

// key = GitHub project name, value =  GitHub username
        $listProjectsSupport = [
            'engage-api' => 'infohkengage',
            'engage-spa' => 'infohkengage',
            'engage-booking-api' => 'infohkengage',
            'engage-booking-spa' => 'infohkengage',
            'invoice-service' => 'infohkengage',
            'payment-service' => 'infohkengage',
            'integration-api' => 'infohkengage',
            'email-service' => 'infohkengage',
            //
            'engage-api-deploy' => 'infohkengage',
            //
            'engage-database-utils' => 'congnqnexlesoft',
            'ops-lib' => 'congnqnexlesoft',
            'docker-base-images' => 'congnqnexlesoft',
        ];

        $GITHUB_PERSONAL_ACCESS_TOKEN_NEW = readline("Please input new GITHUB_PERSONAL_ACCESS_TOKEN? ");
        if (!$GITHUB_PERSONAL_ACCESS_TOKEN_NEW) {
            echo "[ERROR] GitHub Personal Token should be string\n";
            exit();
        }
//
        $workspaceDir = str_replace("/" . basename($_SERVER['PWD']), '', $_SERVER['PWD']);
        echo "WORKSPACE DIR = $workspaceDir\n";
        foreach ($listProjectsSupport as $projectName => $GitHubUsername) {
            echo sprintf(" + Project '%s > %s': %s\n",
                $GitHubUsername,
                $projectName,
                is_dir(sprintf("%s/%s", $workspaceDir, $projectName)) ? "âœ”" : "X"
            );
        }
// update token
        foreach ($listProjectsSupport as $projectName => $GitHubUsername) {
            $projectDir = sprintf("%s/%s", $workspaceDir, $projectName);
            if (is_dir($projectDir)) {
                $output = null;
                $resultCode = null;
                exec(join(';', [
                    sprintf("cd \"%s\"", $projectDir), # jump into this directory
                    sprintf("git remote set-url origin https://%s@github.com/%s/%s.git", $GITHUB_PERSONAL_ACCESS_TOKEN_NEW, $GitHubUsername, $projectName),
                ]), $output, $resultCode);
                // print output
                foreach ($output as $line) {
                    echo sprintf("    + %s\n", $line);
                }
            }
        }
    }


}

// [REMOVED] namespace App\Helpers;

class TextHelper
{
    /**
     * @param string|null $text
     * @return void
     */
    public static function message(string $text = null): void
    {
        echo sprintf("%s\n", $text);
    }

    /**
     * print a separate line
     * @return void
     */
    public static function messageSeparate(): void
    {
        self::message('===');
    }

    /**
     * print a separate line
     * @return void
     */
    public static function messageSeparateHigh(): void
    {
        self::message(PHP_EOL);
        self:: message('.');
        self::message('.');
        self::message('---------------------------------------');
        self::message('.');
        self::message('.');
        self::message(PHP_EOL);
    }

    /**
     * print a title
     * @return void
     */
    public static function messageTitle(string $title): void
    {
        self::message(sprintf("=== %s ===", $title));
    }

    /**
     * print a text to screen with tag SUCCESS
     * @param string $errorText
     * @return void
     */
    public static function messageSUCCESS(string $errorText): void
    {
        self::message(sprintf("[SUCCESS] %s", $errorText));
    }

    /**
     * print a text to screen with tag ERROR
     * @param string $errorText
     * @return void
     */
    public static function messageERROR(string $errorText): void
    {
        self::message(sprintf("[ERROR] %s", $errorText));
    }

    /**
     *  php _ops/lib replace-text-in-file "search text" "replace text" "file path"
     * required
     * - "search text"  (param 2)
     * - "replace text"  (param 3)
     * = "file path" ((param 4)
     * @return void
     */
    public static function replaceTextInFile(array $argv)
    {
// === validate ===
//    validate a message
        $searchText = $argv[2] ?? null;
        $replaceText = $argv[3] ?? null;
        $filePath = $argv[4] ?? null;
        if (!$searchText || is_null($replaceText) || !$filePath) {
            TextHelper::messageERROR("missing a SEARCH TEXT or REPLACE TEXT or FILE PATH");
            exit(); // END
        }
        if (!is_file($filePath)) {
            TextHelper::messageERROR("$filePath does not exist");
            exit(); // END
        }

// === handle ===
        $oldText = file_get_contents($filePath);
        file_put_contents($filePath, str_replace($searchText, $replaceText, $oldText));
        $newText = file_get_contents($filePath);
//    validate result
        if ($oldText === $newText) {
            TextHelper::messageERROR("replace done with failed result");
        } else {
            TextHelper::messageSUCCESS("replace done with successful result");
        }

    }
}

// [REMOVED] namespace App\Helpers;

// [REMOVED] use App\Enum\GitHubEnum;
// [REMOVED] use App\Objects\Process;

class GitHubHelper
{
    /**
     * get current GitHub info, will return
     * [REMOTE_ORIGIN_URL, GITHUB_PERSONAL_TOKEN, USERNAME, REPOSITORY_NAME]
     *
     * @param string|null $remoteOriginUrl
     * @return array
     */
    public static function parseGitHub(string $remoteOriginUrl = null): array
    {
        $remoteOriginUrl = $remoteOriginUrl ?? self::getRemoteOriginUrl();
        return [
            $remoteOriginUrl,
            strpos($remoteOriginUrl, "@") !== false
                ? str_replace('https://', '', explode('@', $remoteOriginUrl)[0])
                : null,
            basename(str_replace(basename($remoteOriginUrl), '', $remoteOriginUrl)),
            basename(str_replace('.git', '', $remoteOriginUrl))
        ];
    }

    public static function getRemoteOriginUrl(): ?string
    {
        return exec(GitHubEnum::GET_REMOTE_ORIGIN_URL_COMMAND);
    }

    public static function getBranchUsingCommand(string $workDir): ?string
    {
        $process = (new Process(__FUNCTION__, $workDir, [
            GitHubEnum::GET_BRANCH_COMMAND
        ]))->execMultiInWorkDir()
            ->printOutput();
        return $process->getOutput() ? $process->getOutput()[count($process->getOutput()) - 1] : null;
    }

    /**
     * checking git already exist in this directory / folder
     * @param string $dirToCheck
     * @return bool
     */
    public static function isGit(string $dirToCheck): bool
    {
        return is_dir(sprintf("%s/.git", $dirToCheck));
    }

    public static function getRepositoryDirCommand(): string
    {
        return exec(GitHubEnum::GET_REPOSITORY_DIR_COMMAND);
    }

    /**
     * usage:
     *     php _ops/lib handle-caches-and-git REPOSITORY
     *
     * case engage-api-deploy, to build api docker image
     *     php _ops/lib_temp/HandleCachesAndGit ENGAGE_API_DEPLOY
     */
    public static function handleCachesAndGit(array $argv)
    {
        // === param ===
        $param2 = $argv[2] ?? null;
        // === validate ===
        //    validate env vars
        $repository = $param2 === 'ENGAGE_API_DEPLOY' ? 'engage-api-deploy' : getenv('Repository');
        $branch = $param2 === 'ENGAGE_API_DEPLOY' ? getenv('API_DEPLOY_BRANCH') : getenv('Branch');
        $EngagePlusCachesRepositoryDir = sprintf("%s/%s", getenv('ENGAGEPLUS_CACHES_DIR'), $repository);
        $GitHubPersonalAccessToken = getenv('GITHUB_PERSONAL_ACCESS_TOKEN');

        if (!$repository || !$branch || !$EngagePlusCachesRepositoryDir || !$GitHubPersonalAccessToken) {
            echo "[ERROR] missing a Branch or Repository or ENGAGEPLUS_CACHES_REPOSITORY_DIR or GITHUB_PERSONAL_ACCESS_TOKEN\n";
            exit(); // END
        }

        // === handle case engage-api-deploy ===

        // === handle ===
        echo "===\n";
        echo "=== HANDLE CACHES AND GIT ===\n";
        echo "Repository=$repository    Branch=$branch   DIR='$EngagePlusCachesRepositoryDir' \n";
        //
        $gitRemoteURLWithToken = sprintf("https://%s@github.com/infohkengage/%s.git", $GitHubPersonalAccessToken, $repository);
        //     case checkout
        if (is_dir(sprintf("%s/.git", $EngagePlusCachesRepositoryDir))) {
            echo "The directory '$EngagePlusCachesRepositoryDir' exist, SKIP to handle git repository\n";
            //
            // case clone
        } else {
            echo "[ERROR] The directory '$EngagePlusCachesRepositoryDir' does not exist, clone new repository\n";
            $output = null;
            $resultCode = null;
            exec(join(';', [
                sprintf("rm -rf \"%s\"", $EngagePlusCachesRepositoryDir),
                sprintf("mkdir -p \"%s\"", $EngagePlusCachesRepositoryDir),
                sprintf("cd \"%s\"", $EngagePlusCachesRepositoryDir), # jump into this directory
                sprintf("git clone -b %s %s .", $branch, $gitRemoteURLWithToken),
            ]), $output, $resultCode);
            // print output
            foreach ($output as $line) {
                echo sprintf("    + %s\n", $line);
            }
        }
        // === update new code ===
        $output = null;
        $resultCode = null;
        exec(join(';', [
            sprintf("cd \"%s\"", $EngagePlusCachesRepositoryDir), # jump into this directory
            sprintf("git remote set-url origin %s", $gitRemoteURLWithToken),
            'git reset --hard HEAD',
            sprintf("git checkout %s", $branch),
            'git pull',
        ]), $output, $resultCode);
        // print output
        foreach ($output as $line) {
            echo sprintf("    + %s\n", $line);
        }
        echo "===\n\n";

    }
}

// [REMOVED] namespace App\Helpers;

class ServicesHelper
{
    // usage:
    //    php _ops/lib slack "YOU MESSAGE";
    public static function SlackMessage(array $argv)
    {
        // === validate ===
        //    validate a message
        $message = $argv[2] ?? null;
        if (!$message) {
            echo "[ERROR] missing a MESSAGE\n";
            exit(); // END
        }
        //    validate env vars
        $repository = getenv('Repository');
        $branch = getenv('Branch');
        $slackBotToken = getenv('SLACK_BOT_TOKEN');
        $slackChannel = getenv('SLACK_CHANNEL');
        if (!$repository || !$branch || !$slackBotToken || !$slackChannel) {
            echo "[ERROR] missing a Branch or Repository or SLACK_BOT_TOKEN or SLACK_CHANNEL\n";
            exit(); // END
        }

        // === handle ===
        $slackUrl = "https://slack.com/api/chat.postMessage";
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $slackUrl);
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_HTTPHEADER, [sprintf("Authorization: Bearer %s", $slackBotToken)]);
        curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query([
            "channel" => $slackChannel,
            "text" => sprintf("[%s] [%s] > %s", $repository, $branch, $message),
        ]));
        if (!curl_exec($curl)) {
            echo 'Curl error: ' . curl_error($curl);
        } else {
            $responseCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            echo $responseCode === 200
                ? "\nMessage sent successfully\n"
                : "\nError sending message with code $responseCode \n";
        }

    }
}

// [REMOVED] namespace App\Objects;

// [REMOVED] use App\App;
// [REMOVED] use App\Helpers\DEVHelper;
// [REMOVED] use App\Helpers\DirHelper;

class Release
{
    /**
     * @var array
     * to release
     */
    const FILES_LIST = [
        // === Enum ===
        'App/Enum/CommandEnum.php',
        'App/Enum/GitHubEnum.php',
        // === Helper ===
        'App/Helpers/DEVHelper.php',
        'App/Helpers/DirHelper.php',
        'App/Helpers/OpsHelper.php',
        'App/Helpers/TextHelper.php',
        'App/Helpers/GitHubHelper.php',
        'App/Helpers/ServicesHelper.php',
        // === Objects ===
        'App/Objects/Release.php',
        'App/Objects/Process.php',
        // always on bottom
        'App/app.php',
    ];

    const RELEASE_PATH = '_ops/lib';

    public function __construct()
    {

    }

    /**
     *  null: validate OK
     *  string: error message
     * @return string|null
     */
    private function validate(): ?string
    {
        switch (basename(DirHelper::getScriptDir())) {
            case 'App':
                return null;
            case '_ops':
                return "[ERROR] in release directory \ another project, stop release job\n";
            default:
                return "[ERROR] unknown error\n";
        }
    }

    public function handle(): void
    {
        if ($this->validate()) {
            echo DEVHelper::message($this->validate(), __CLASS__, __FUNCTION__);
            return; // END
        }
        // handle
        echo DEVHelper::message("init ops/lib file\n", __CLASS__, __FUNCTION__);
        file_put_contents(self::RELEASE_PATH, sprintf("#!/usr/bin/env php\n\n// === %s v%s ===\n", App::APP_NAME, App::APP_VERSION)); // init file
        $this->handleLibrariesClass();
        $this->handleAppClass();
        echo DEVHelper::message("DONE\n", __CLASS__, __FUNCTION__);
    }

    /**
     * remove tab 
     * remove namespace
     * remove some unused elements
     * @param string $classPath
     * @return string
     */
    private function handlePHPClassContent(string $classPath): string
    {
        // remove php tag
        $classContent = str_replace('', '', trim(file_get_contents($classPath)));
        // remove unused elements
        $lines = explode("\n", $classContent);
        $modifiedLines = [];
        foreach ($lines as $line) {
            // remove 'namespace'
            if (strpos($line, "namespace ") === 0) {
                $line = "// [REMOVED] " . $line;
            }
            // remove 'use'
            if (strpos($line, "use ") === 0) {
                $line = "// [REMOVED] " . $line;
            }
            $modifiedLines[] = $line;
        }
        return implode("\n", $modifiedLines);
    }

    /**
     * @return void
     */
    private function handleAppClass(): void
    {
        $appClassContent = $this->handlePHPClassContent(self::FILES_LIST[count(self::FILES_LIST) - 1]);
        $appClassContentClassOnly = sprintf("class App%s", explode('class App', $appClassContent)[1]);
        file_put_contents(
            self::RELEASE_PATH,
            sprintf("\n// === Generated app class ===\n\n%s\n\n// === end Generated app class ===\n\n", $appClassContentClassOnly),
            FILE_APPEND
        ); // init file
    }

    /**
     * @return void
     */
    private function handleLibrariesClass(): void
    {
        $librariesClassesContent = "";
        for ($i = 0; $i < count(self::FILES_LIST) - 1; $i++) {
            $librariesClassesContent .= $this->handlePHPClassContent(self::FILES_LIST[$i]);
        }
        file_put_contents(
            self::RELEASE_PATH,
            sprintf("\n// === Generated libraries classes ===\n\n%s\n\n// === end Generated libraries classes ===\n\n", $librariesClassesContent),
            FILE_APPEND
        ); // init file
    }
}

// [REMOVED] namespace App\Objects;

// [REMOVED] use SharedLib\Enum\GitHubEnum;
// [REMOVED] use SharedLib\Helpers\DotENVHelper;
// [REMOVED] use SharedLib\Helpers\TextHelper;

class Process
{
    /** @var string|null */
    private $workName;

    /** @var string|null */
    private $workDir;

    /** @var array|null */
    private $commands;

    /** @var array|null */
    private $output;

    /**
     * @param string|null $workName
     * @param string|null $workDir
     * @param array|null $commands
     */
    public function __construct(
        string $workName = null,
        string $workDir = null,
        array  $commands = null
    )
    {
        $this->workName = $workName;
        $this->workDir = $workDir;
        $this->commands = $commands;
    }

    /**
     * @return string|null
     */
    public function getWorkName(): ?string
    {
        return $this->workName;
    }

    /**
     * @param string|null $workName
     * @return Process
     */
    public function setWorkName(?string $workName): Process
    {
        $this->workName = $workName;
        return $this;
    }

    /**
     * @return string|null
     */
    public function getWorkDir(): ?string
    {
        return $this->workDir;
    }

    /**
     * @param string|null $workDir
     * @return Process
     */
    public function setWorkDir(?string $workDir): Process
    {
        $this->workDir = $workDir;
        return $this;
    }

    /**
     * @return array|null
     */
    public function getCommands(): ?array
    {
        return $this->commands;
    }

    /**
     * @param array|null $commands
     * @return Process
     */
    public function setCommands(?array $commands): Process
    {
        $this->commands = $commands;
        return $this;
    }

    /**
     * @return array|null
     */
    public function getOutput(): ?array
    {
        return $this->output;
    }

    /**
     * @param array|null $output
     * @return Process
     */
    public function setOutput(?array $output): Process
    {
        $this->output = $output;
        return $this;
    }

    // === UTILS ZONE ===

    public function execMulti(): Process
    {
        // load .env
       $this ->commands = array_merge(DotENVHelper::loadDotENV_SHELLCommand(),$this ->commands);
        //
        if ($this->commands) {
            $resultCode = null;
            exec(join(';', $this->commands), $this->output, $resultCode);
        }
        //
        return $this;
    }

    public function execMultiInWorkDir(bool $skipCheckDir = false): Process
    {
        // dir commands
        $arrDirCommands[] = sprintf("cd '%s'", $this->workDir); // cd
        if (!$skipCheckDir) {
            $arrDirCommands[] = GitHubEnum::REPOSITORY_DIR_COMMAND; // check dir
        }
        $this->commands = array_merge($arrDirCommands, $this->commands);
        $this->execMulti();
        //
        return $this;
    }

    public function printOutput(): Process
    {
        TextHelper::message(sprintf("\n[WORK] %s", $this->workName));
        TextHelper::message("- Commands: ");
        if ($this->commands) {
            foreach ($this->commands as $command) {
                TextHelper::message(sprintf("    > %s", $command));
            }
        }
        TextHelper::message("- Output: ");
        if ($this->output) {
            foreach ($this->output as $outputLine) {
                TextHelper::message(sprintf("    + %s", $outputLine));
            }
        }
        //
        return $this;
    }

    // === END UTILS ZONE ===

}

// === end Generated libraries classes ===


// === Generated app class ===

class App
{
    const APP_NAME = 'OPS SHARED LIBRARY (PHP)';
    /**
     * 1.0: multiple files PHP and bash scripts
     * 2.0: combine 1 lib file
     * @var string
     */
    const APP_VERSION = '2.0';

    public function __construct()
    {

    }

    public function run(array $argv)
    {
        // === params ===
        $command = $argv[1] ?? null;
        $param1 = $argv[2] ?? null; // to use if needed

        // === validation ===
        if (!$command) {
            echo "[ERROR] missing command, should be 'php _ops/LIB COMMAND'\n";
            $this->help();
            exit(); // END
        }
        if (!array_key_exists($command, CommandEnum::SUPPORT_COMMANDS)) {
            echo sprintf("[ERROR] do not support this command '%s'\n", $command);
            $this->help();
            exit(); // END
        }

        // === handle ===
        switch ($command) {
            // === this app ===
            case CommandEnum::HELP:
                $this->help();
                break;
            case CommandEnum::RELEASE:
                (new Release())->handle();
                break;
            case CommandEnum::VERSION:
                TextHelper::message(sprintf("%s v%s", self::APP_NAME, self::APP_VERSION));
                break;
            // === ops ===
            case CommandEnum::BRANCH:
                echo exec(GitHubEnum::GET_BRANCH_COMMAND);
                break;
            case  CommandEnum::REPOSITORY:
                echo basename(str_replace('.git', '', exec(GitHubEnum::GET_REMOTE_ORIGIN_URL_COMMAND)));
                break;
            case CommandEnum::HEAD_COMMIT_ID:
                echo exec(GitHubEnum::GET_HEAD_COMMIT_ID_COMMAND);
                break;
            case CommandEnum::HOME_DIR:
                echo DirHelper::getHomeDir();
                break;
            case  CommandEnum::SCRIPT_DIR:
               echo DirHelper::getScriptDir();
                break;
            case CommandEnum::WORKING_DIR:
                echo DirHelper::getWorkingDir();
                break;
            case CommandEnum::REPLACE_TEXT_IN_FILE:
                TextHelper::replaceTextInFile($argv);
                break;
            case CommandEnum::HANDLE_CACHES_AND_GIT:
                GitHubHelper::handleCachesAndGit($argv);
                break;
            case CommandEnum::SLACK:
                ServicesHelper::SlackMessage($argv);
                break;
            // === private ===
            case CommandEnum::GET_S3_WHITE_LIST_IPS_DEVELOPMENT:
                echo OpsHelper::getS3WhiteListIpsDevelopment();
                break;
            case CommandEnum::UPDATE_GITHUB_TOKEN_ALL_PROJECT:
                OpsHelper::updateGitHubTokenAllProjects();
                break;
            default:
                echo "[ERROR] Unknown error";
                break;
        }
    }

    private function help()
    {
        TextHelper::message();
        TextHelper::messageTitle(sprintf("%s v%s", self::APP_NAME, self::APP_VERSION));
        echo "[INFO] usage:  php _ops/lib COMMAND  \n";
        echo "               php _ops/lib COMMAND PARAM_1 \n\n";
        echo "[INFO] Support commands:\n";
        foreach (CommandEnum::SUPPORT_COMMANDS as $command => $description) {
            echo sprintf(" +    %s    :  %s\n", $command, $description);
        }
        echo "\n===\n\n";
    }
}

// === end class zone ====

// === execute zone ===
(new App())->run($argv);
// === end execute zone ===

// === end Generated app class ===


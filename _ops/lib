#!/usr/bin/env php
<?php
// === OPS SHARED LIBRARY (PHP) ===

// === Generated libraries classes ===



// [REMOVED] namespace App\Enum;

class CommandEnum
{
    // === this app commands ===
    const HELP = 'help';
    const RELEASE = 'release';
    // === ops commands ===
    const BRANCH = 'branch';
    const REPOSITORY = 'repository';
    const HEAD_COMMIT_ID = 'head-commit-id';
    const HOME_DIR = 'home-dir';
    const SCRIPT_DIR = 'script-dir';
    const WORKING_DIR = 'working-dir';
    // === ops private commands ===
    const GET_S3_WHITE_LIST_IPS_DEVELOPMENT = 'get-s3-white-list-ips-develop';
    const UPDATE_GITHUB_TOKEN_ALL_PROJECT = 'update-github-token-all-project';


    /**
     * @var array
     * key => value | key is command, value is description
     */
    const SUPPORT_COMMANDS = [
        self::HELP => 'show list support command and usage',
        self::RELEASE => 'combine all PHP files into \'_ops/lib\'',
        //
        self::BRANCH => 'get git branch / GitHub branch',
        self::REPOSITORY => 'get GitHub repository name',
        self::HEAD_COMMIT_ID => 'get head commit id of branch',
        self::HOME_DIR => 'return home directory of machine / server',
        self::SCRIPT_DIR => 'return directory of script',
        self::WORKING_DIR => 'get root project directory / current working directory',
        // private
        self::GET_S3_WHITE_LIST_IPS_DEVELOPMENT => '[PRIVATE] get S3 whitelist IPs to add to AWS Policy',
        self::UPDATE_GITHUB_TOKEN_ALL_PROJECT => '[PRIVATE] update token all projects in workspace',
    ];
}

// [REMOVED] namespace App\Helpers;

class DEVHelper
{
    /**
     * get class name only, usage   DEVHelper::name(__CLASS__)
     *
     * @param string|null $classPath
     * @return string
     */
    public static function name(string $classPath = null): string
    {
        $pathArr = $classPath ? explode('\\', $classPath) : [];
        return end($pathArr);
    }

    /**
     * more detail with class and function name
     * use:
     *      DEVHelper::message($message, __CLASS__, __FUNCTION__);
     *
     * @param string $message
     * @param string|null $classPath
     * @param string|null $function
     * @return string
     */
    public static function message(string $message, string $classPath = null, string $function = null): string
    {
        return sprintf("[%s > %s]    %s", self::name($classPath), $function, $message);
    }
}

// [REMOVED] namespace App\Helpers;

class DirHelper
{
    /**
     * get home directory / get root directory of user
     * @return string
     */
    public static function getHomeDir(): string
    {
        return $_SERVER['HOME'];
    }

    public static function getWorkingDir(): string
    {
        return $_SERVER['PWD'];
    }

    /**
     * get current working directory of script
     * @return string
     */
    public static function getScriptDir(): string
    {
        return str_replace('/' . basename($_SERVER['SCRIPT_FILENAME']), '', sprintf("%s/%s", self::getWorkingDir(), $_SERVER['SCRIPT_FILENAME']));
    }

    // backup code
//    public static function getRepositoryDir()
//    {
//        return exec('git rev-parse --show-toplevel');
//    }
}

// [REMOVED] namespace App\Helpers;

class OpsHelper
{
    public static function getS3WhiteListIpsDevelopment(): string
    {

        $NEXLE_IPS = [
            '115.73.208.177', // Nexle VPN
            '115.73.208.182', // Nexle HCM office - others
            '115.73.208.183', // Nexle HCM office - others
            '14.161.25.117', // Nexle HCM office - others
            '118.69.176.228', // Nexle DN office
        ];
        $GITHUB_RUNNER_SERVER_IP = '18.167.126.148';
        $EC2DevelopIp = exec("echo $(curl https://develop-api.engageplus.io/api/booking/IP-QYIa20HxwQ)");
        $EC2StagingIp = exec("echo $(curl https://staging-api.engageplus.io/api/booking/IP-QYIa20HxwQ)");
        //
        $S3_WHITELIST_IP_DEVELOPMENT = array_merge($NEXLE_IPS, [
            $GITHUB_RUNNER_SERVER_IP,
            $EC2DevelopIp,
            $EC2StagingIp
        ]);
        //
        return sprintf("\n\n%s\n\n", json_encode($S3_WHITELIST_IP_DEVELOPMENT));
    }

    public static function updateGitHubTokenAllProjects()
    {

// key = GitHub project name, value =  GitHub username
        $listProjectsSupport = [
            'engage-api' => 'infohkengage',
            'engage-spa' => 'infohkengage',
            'engage-booking-api' => 'infohkengage',
            'engage-booking-spa' => 'infohkengage',
            'invoice-service' => 'infohkengage',
            'payment-service' => 'infohkengage',
            'integration-api' => 'infohkengage',
            'email-service' => 'infohkengage',
            //
            'engage-api-deploy' => 'infohkengage',
            //
            'engage-database-utils' => 'congnqnexlesoft',
            'ops-lib' => 'congnqnexlesoft',
            'docker-base-images' => 'congnqnexlesoft',
        ];

        $GITHUB_PERSONAL_ACCESS_TOKEN_NEW = readline("Please input new GITHUB_PERSONAL_ACCESS_TOKEN? ");
        if (!$GITHUB_PERSONAL_ACCESS_TOKEN_NEW) {
            echo "[ERROR] GitHub Personal Token should be string\n";
            exit();
        }
//
        $workspaceDir = str_replace("/" . basename($_SERVER['PWD']), '', $_SERVER['PWD']);
        echo "WORKSPACE DIR = $workspaceDir\n";
        foreach ($listProjectsSupport as $projectName => $GitHubUsername) {
            echo sprintf(" + Project '%s > %s': %s\n",
                $GitHubUsername,
                $projectName,
                is_dir(sprintf("%s/%s", $workspaceDir, $projectName)) ? "âœ”" : "X"
            );
        }
// update token
        foreach ($listProjectsSupport as $projectName => $GitHubUsername) {
            $projectDir = sprintf("%s/%s", $workspaceDir, $projectName);
            if (is_dir($projectDir)) {
                $output = null;
                $resultCode = null;
                exec(join(';', [
                    sprintf("cd \"%s\"", $projectDir), # jump into this directory
                    sprintf("git remote set-url origin https://%s@github.com/%s/%s.git", $GITHUB_PERSONAL_ACCESS_TOKEN_NEW, $GitHubUsername, $projectName),
                ]), $output, $resultCode);
                // print output
                foreach ($output as $line) {
                    echo sprintf("    + %s\n", $line);
                }
            }
        }
    }


}

// [REMOVED] namespace App\Objects;

// [REMOVED] use App\Helpers\DEVHelper;
// [REMOVED] use App\Helpers\DirHelper;

class Release
{
    /**
     * @var array
     * to release
     */
    const FILES_LIST = [
        // === Enum ===
        'App/Enum/CommandEnum.php',
        // === Helper ===
        'App/Helpers/DEVHelper.php',
        'App/Helpers/DirHelper.php',
        'App/Helpers/OpsHelper.php',
        // === Objects ===
        'App/Objects/Release.php',
        // always on bottom
        'App/app.php',
    ];

    const RELEASE_PATH = '_ops/lib';

    public function __construct()
    {

    }

    /**
     *  null: validate OK
     *  string: error message
     * @return string|null
     */
    private function validate(): ?string
    {
        switch (basename(DirHelper::getScriptDir())) {
            case 'App':
                return null;
            case '_ops':
                return "[ERROR] in release directory \ another project, stop release job\n";
            default:
                return "[ERROR] unknown error\n";
        }
    }

    public function handle(): void
    {
        if ($this->validate()) {
            echo DEVHelper::message($this->validate(), __CLASS__, __FUNCTION__);
            return; // END
        }
        // handle
        echo DEVHelper::message("init ops/lib file\n", __CLASS__, __FUNCTION__);
        file_put_contents(self::RELEASE_PATH, "#!/usr/bin/env php\n\n// === OPS SHARED LIBRARY (PHP) ===\n"); // init file
        $this->handleLibrariesClass();
        $this->handleAppClass();
        echo DEVHelper::message("DONE\n", __CLASS__, __FUNCTION__);
    }

    /**
     * remove tab 
     * remove namespace
     * remove some unused elements
     * @param string $classPath
     * @return string
     */
    private function handlePHPClassContent(string $classPath): string
    {
        // remove php tag
        $classContent = str_replace('', '', trim(file_get_contents($classPath)));
        // remove unused elements
        $lines = explode("\n", $classContent);
        $modifiedLines = [];
        foreach ($lines as $line) {
            // remove 'namespace'
            if (strpos($line, "namespace ") === 0) {
                $line = "// [REMOVED] " . $line;
            }
            // remove 'use'
            if (strpos($line, "use ") === 0) {
                $line = "// [REMOVED] " . $line;
            }
            $modifiedLines[] = $line;
        }
        return implode("\n", $modifiedLines);
    }

    /**
     * @return void
     */
    private function handleAppClass(): void
    {
        $appClassContent = $this->handlePHPClassContent(self::FILES_LIST[count(self::FILES_LIST) - 1]);
        $appClassContentClassOnly = sprintf("class App%s", explode('class App', $appClassContent)[1]);
        file_put_contents(
            self::RELEASE_PATH,
            sprintf("\n// === Generated app class ===\n\n%s\n\n// === end Generated app class ===\n\n", $appClassContentClassOnly),
            FILE_APPEND
        ); // init file
    }

    /**
     * @return void
     */
    private function handleLibrariesClass(): void
    {
        $librariesClassesContent = "";
        for ($i = 0; $i < count(self::FILES_LIST) - 1; $i++) {
            $librariesClassesContent .= $this->handlePHPClassContent(self::FILES_LIST[$i]);
        }
        file_put_contents(
            self::RELEASE_PATH,
            sprintf("\n// === Generated libraries classes ===\n\n%s\n\n// === end Generated libraries classes ===\n\n", $librariesClassesContent),
            FILE_APPEND
        ); // init file
    }
}

// === end Generated libraries classes ===


// === Generated app class ===

class App
{
    public function __construct()
    {

    }

    public function run(array $argv)
    {
        // === params ===
        $command = $argv[1] ?? null;
        $param1 = $argv[2] ?? null; // to use if needed

        // === validation ===
        if (!$command) {
            echo "[ERROR] missing command, should be 'php _ops/LIB COMMAND'\n";
            $this->help();
            exit(); // END
        }
        if (!array_key_exists($command, CommandEnum::SUPPORT_COMMANDS)) {
            echo sprintf("[ERROR] do not support this command '%s'\n", $command);
            $this->help();
            exit(); // END
        }

        // === handle ===
        switch ($command) {
            // === this app ===
            case CommandEnum::HELP:
                $this->help();
                break;
            case CommandEnum::RELEASE:
                (new Release())->handle();
                break;
            // === ops ===
            case CommandEnum::BRANCH:
                echo exec("git symbolic-ref HEAD | sed 's/refs\/heads\///g'");
                break;
            case  CommandEnum::REPOSITORY:
                echo basename(str_replace('.git', '', exec('git config --get remote.origin.url')));
                break;
            case CommandEnum::HEAD_COMMIT_ID:
                echo exec("git rev-parse --short HEAD");
                break;
            case CommandEnum::HOME_DIR:
                echo $_SERVER['HOME'];
                break;
            case  CommandEnum::SCRIPT_DIR:
                echo str_replace('/' . basename($_SERVER['SCRIPT_FILENAME']), '', sprintf("%s/%s", $_SERVER['PWD'], $_SERVER['SCRIPT_FILENAME']));
                break;
            case CommandEnum::WORKING_DIR:
                echo $_SERVER['PWD'];
                break;
            // === private ===
            case CommandEnum::GET_S3_WHITE_LIST_IPS_DEVELOPMENT:
                echo OpsHelper::getS3WhiteListIpsDevelopment();
                break;
            case CommandEnum::UPDATE_GITHUB_TOKEN_ALL_PROJECT:
                echo OpsHelper::updateGitHubTokenAllProjects();
                break;
            default:
                echo "[ERROR] Unknown error";
                break;
        }
    }

    private function help()
    {
        echo "\n[INFO] usage:  php _ops/lib COMMAND  \n";
        echo "               php _ops/lib COMMAND PARAM_1 \n\n";
        echo "[INFO] Support commands:\n";
        foreach (CommandEnum::SUPPORT_COMMANDS as $command => $description) {
            echo sprintf(" +    %s    :  %s\n", $command, $description);
        }
        echo "\n===\n\n";
    }
}

// === end class zone ====

// === execute zone ===
(new App())->run($argv);
// === end execute zone ===

// === end Generated app class ===


#!/usr/bin/env php
<?php
// === OPS SHARED LIBRARY (PHP) v2.0.76 ===

// === Generated libraries classes ===



// [REMOVED] namespace App\Enum;

class CommandEnum
{
    // === this app commands ===
    const HELP = 'help';
    const RELEASE = 'release';
    const VERSION = 'version';
    const SYNC ='sync';
    // === SHELL DATA commands
    const LOAD_ENV_OPS = 'load-env-ops';
    const GET_SECRET_ENV = 'get-secret-env';
    // === ops commands ===
    const BRANCH = 'branch';
    const REPOSITORY = 'repository';
    const HEAD_COMMIT_ID = 'head-commit-id';
    const HOME_DIR = 'home-dir';
    const SCRIPT_DIR = 'script-dir';
    const WORKING_DIR = 'working-dir';
    const REPLACE_TEXT_IN_FILE = 'replace-text-in-file';
    const HANDLE_CACHES_AND_GIT = 'handle-caches-and-git';
    const SLACK = 'slack';
    // === ops private commands ===
    const GET_S3_WHITE_LIST_IPS_DEVELOPMENT = 'get-s3-white-list-ips-develop';
    const UPDATE_GITHUB_TOKEN_ALL_PROJECT = 'update-github-token-all-project';


    /**
     * @var array
     * key => value | key is command, value is description
     */
    const SUPPORT_COMMANDS = [
        self::HELP => 'show list support command and usage',
        self::RELEASE => 'combine all PHP files into \'_ops/lib\'',
        self::VERSION => "show app version",
        self::SYNC => "sync new release code to project at _ops/lib",
        // AWS releated commands
        self::LOAD_ENV_OPS => "[AWS Secret Manager] [CREDENTIAL REQUIRED] load env ops, usage in Shell:\n\n                         eval \"$(php _ops/lib load-env-ops)\"    \n",
        self::GET_SECRET_ENV => "[AWS Secret Manager] [CREDENTIAL REQUIRED] get .env | params:  secretName, customENVName\n",
        //
        self::BRANCH => 'get git branch / GitHub branch',
        self::REPOSITORY => 'get GitHub repository name',
        self::HEAD_COMMIT_ID => 'get head commit id of branch',
        self::HOME_DIR => 'return home directory of machine / server',
        self::SCRIPT_DIR => 'return directory of script',
        self::WORKING_DIR => 'get root project directory / current working directory',
        self::REPLACE_TEXT_IN_FILE => 'php _ops/lib replace-text-in-file "search text" "replace text" "file path"',
        self::HANDLE_CACHES_AND_GIT => 'handle GitHub repository in caches directory',
        self::SLACK => "notify a message to Slack\n",
        // private
        self::GET_S3_WHITE_LIST_IPS_DEVELOPMENT => '[PRIVATE] get S3 whitelist IPs to add to AWS Policy',
        self::UPDATE_GITHUB_TOKEN_ALL_PROJECT => '[PRIVATE] update token all projects in workspace',
    ];
}

// [REMOVED] namespace App\Enum;

class GitHubEnum
{
    public const REPOSITORY_DIR_COMMAND = 'git rev-parse --show-toplevel';
    public const RESET_BRANCH_COMMAND = 'git reset --hard HEAD'; // rollback all changing
    public const GET_BRANCH_COMMAND = "git symbolic-ref HEAD | sed 's/refs\/heads\///g'";
    public const PULL_COMMAND = 'git pull'; // get the newest code
    public const ADD_ALL_FILES_COMMAND = 'git add -A';
    public const PUSH_COMMAND = 'git push';
    public const GET_REMOTE_ORIGIN_URL_COMMAND = 'git config --get remote.origin.url';
    public const GET_REPOSITORY_DIR_COMMAND = 'git rev-parse --show-toplevel';
    public const GET_HEAD_COMMIT_ID_COMMAND = 'git rev-parse --short HEAD';

    /**
     * key => value  | key = GitHub project name, value =  GitHub username
     */
    public const GITHUB_REPOSITORIES = [
        'engage-api' => 'infohkengage',
        'engage-spa' => 'infohkengage',
        'engage-booking-api' => 'infohkengage',
        'engage-booking-spa' => 'infohkengage',
        'invoice-service' => 'infohkengage',
        'payment-service' => 'infohkengage',
        'integration-api' => 'infohkengage',
        'email-service' => 'infohkengage',
        //
        'engage-api-deploy' => 'infohkengage',
        //
        'engage-database-utils' => 'congnqnexlesoft',
        'ops-lib' => 'congnqnexlesoft',
        'docker-base-images' => 'congnqnexlesoft',
    ];
}

// [REMOVED] namespace App\Helpers;

class DEVHelper
{
    /**
     * get class name only, usage   DEVHelper::name(__CLASS__)
     *
     * @param string|null $classPath
     * @return string
     */
    public static function name(string $classPath = null): string
    {
        $pathArr = $classPath ? explode('\\', $classPath) : [];
        return end($pathArr);
    }

    /**
     * more detail with class and function name
     * use:
     *      DEVHelper::message($message, __CLASS__, __FUNCTION__);
     *
     * @param string $message
     * @param string|null $classPath
     * @param string|null $function
     * @return string
     */
    public static function message(string $message, string $classPath = null, string $function = null): string
    {
        return sprintf("[%s > %s]    %s", self::name($classPath), $function, $message);
    }
}

// [REMOVED] namespace App\Helpers;

class DirHelper
{
    /**
     * get home directory / get root directory of user
     * @return string
     */
    public static function getHomeDir(): string
    {
        return $_SERVER['HOME'];
    }

    public static function getWorkingDir(): string
    {
        return $_SERVER['PWD'];
    }

    /**
     * get current working directory of script
     * @return string
     */
    public static function getScriptDir(): string
    {
        return str_replace('/' . basename($_SERVER['SCRIPT_FILENAME']), '', sprintf("%s/%s", self::getWorkingDir(), $_SERVER['SCRIPT_FILENAME']));
    }

    // backup code
//    public static function getRepositoryDir()
//    {
//        return exec('git rev-parse --show-toplevel');
//    }
}

// [REMOVED] namespace App\Helpers;

// [REMOVED] use App\App;
// [REMOVED] use App\Enum\GitHubEnum;
// [REMOVED] use App\Objects\Process;

class OpsHelper
{
    public static function getS3WhiteListIpsDevelopment(): string
    {

        $NEXLE_IPS = [
            '115.73.208.177', // Nexle VPN
            '115.73.208.182', // Nexle HCM office - others
            '115.73.208.183', // Nexle HCM office - others
            '14.161.25.117', // Nexle HCM office - others
            '118.69.176.228', // Nexle DN office
        ];
        $GITHUB_RUNNER_SERVER_IP = '18.167.126.148';
        $EC2DevelopIp = exec("echo $(curl https://develop-api.engageplus.io/api/booking/IP-QYIa20HxwQ)");
        $EC2StagingIp = exec("echo $(curl https://staging-api.engageplus.io/api/booking/IP-QYIa20HxwQ)");
        //
        $S3_WHITELIST_IP_DEVELOPMENT = array_merge($NEXLE_IPS, [
            $GITHUB_RUNNER_SERVER_IP,
            $EC2DevelopIp,
            $EC2StagingIp
        ]);
        //
        return sprintf("\n\n%s\n\n", json_encode($S3_WHITELIST_IP_DEVELOPMENT));
    }

    public static function updateGitHubTokenAllProjects()
    {
        $GITHUB_PERSONAL_ACCESS_TOKEN_NEW = readline("Please input new GITHUB_PERSONAL_ACCESS_TOKEN? ");
        if (!$GITHUB_PERSONAL_ACCESS_TOKEN_NEW) {
            TextHelper::messageERROR("GitHub Personal Token should be string");
            exit(); // END
        }
//
        $workspaceDir = str_replace("/" . basename($_SERVER['PWD']), '', $_SERVER['PWD']);
        TextHelper::message("WORKSPACE DIR = $workspaceDir");
        foreach (GitHubEnum::GITHUB_REPOSITORIES as $projectName => $GitHubUsername) {
            TextHelper::message(sprintf(" + Project '%s > %s': %s",
                $GitHubUsername,
                $projectName,
                is_dir(sprintf("%s/%s", $workspaceDir, $projectName)) ? "âœ”" : "X"
            ));
        }
// update token
        foreach (GitHubEnum::GITHUB_REPOSITORIES as $projectName => $GitHubUsername) {
            $projectDir = sprintf("%s/%s", $workspaceDir, $projectName);
            if (is_dir($projectDir)) {
                $output = null;
                $resultCode = null;
                exec(join(';', [
                    sprintf("cd \"%s\"", $projectDir), # jump into this directory
                    sprintf("git remote set-url origin https://%s@github.com/%s/%s.git", $GITHUB_PERSONAL_ACCESS_TOKEN_NEW, $GitHubUsername, $projectName),
                ]), $output, $resultCode);
                // print output
                foreach ($output as $line) {
                    TextHelper::message(sprintf("    + %s", $line));
                }
            }
        }
    }

    /**
     * sync new release code to project at _ops/lib
     * sync strategy:
     * - clone 'ops-lib' project at caches folder
     * - copy new lib file into project at _ops/lib
     */
    public static function sync(string $SHELL_HANDLE_ENV_OPS_DATA_BASE64)
    {
        // load env into PHP
        self::parseEnoughDataForSync(AWSHelper::loadOpsEnvAndHandleMore($SHELL_HANDLE_ENV_OPS_DATA_BASE64));
        // load caches of this source code
        GitHubHelper::handleCachesAndGit([
            'script path',
            'command-name', // param 1
            'ops-lib', // param 2, in this case is repository
            'main', // param 3, in this case is branch
        ]);
        // sync new lib
        $EngagePlusCachesRepositoryOpsLibDir = sprintf("%s/ops-lib", getenv('ENGAGEPLUS_CACHES_DIR'));
        (new Process("SYNC OPS LIB", DirHelper::getWorkingDir(), [
            'rm _ops/lib',
            sprintf(
                "cp -f '%s/_ops/lib' '%s/_ops/lib'",
                $EngagePlusCachesRepositoryOpsLibDir,
                DirHelper::getWorkingDir()
            ),
        ]))->execMultiInWorkDir()->printOutput();
        //
        TextHelper::messageSeparate();
        TextHelper::messageSUCCESS("sync done");
        // show open new session to show right version
        TextHelper::message(App::versionNew());
    }

    /**
     * need to get
     * - ENGAGEPLUS_CACHES_FOLDER
     * - ENGAGEPLUS_CACHES_DIR="$(php _ops/lib home-dir)/${ENGAGEPLUS_CACHES_FOLDER}"
     * - GITHUB_PERSONAL_ACCESS_TOKEN
     * and put to PHP env
     * @return void
     */
    private static function parseEnoughDataForSync(string $opsEnvAllData)
    {
        $tempArr = explode(PHP_EOL, $opsEnvAllData);
        foreach ($tempArr as $line) {
            if (strpos($line, "export ENGAGEPLUS_CACHES_FOLDER") !== false) {
                $key = explode('=', str_replace('export ', '', $line), 2)[0];
                $value = explode('=', str_replace('export ', '', $line), 2)[1];
                $value = trim($value, '"');
                putenv("$key=$value");
            }
            if (strpos($line, "export GITHUB_PERSONAL_ACCESS_TOKEN") !== false) {
                putenv(trim(str_replace('export ', '', $line), '"'));
            }
        }
        //
        putenv(sprintf("ENGAGEPLUS_CACHES_DIR=%s/%s", DirHelper::getHomeDir(), getenv('ENGAGEPLUS_CACHES_FOLDER')));
    }
}

// [REMOVED] namespace App\Helpers;

class TextHelper
{
    /**
     * @param string|null $text
     * @return void
     */
    public static function message(string $text = null): void
    {
        echo sprintf("%s\n", $text);
    }

    /**
     * print a separate line
     * @return void
     */
    public static function messageSeparate(): void
    {
        self::message('===');
    }

    /**
     * print a separate line
     * @return void
     */
    public static function messageSeparateHigh(): void
    {
        self::message(PHP_EOL);
        self:: message('.');
        self::message('.');
        self::message('---------------------------------------');
        self::message('.');
        self::message('.');
        self::message(PHP_EOL);
    }

    /**
     * print a title
     * @return void
     */
    public static function messageTitle(string $title): void
    {
        self::message(sprintf("=== %s ===", $title));
    }

    /**
     * print a text to screen with tag SUCCESS
     * @param string $errorText
     * @return void
     */
    public static function messageSUCCESS(string $errorText): void
    {
        self::message(sprintf("[SUCCESS] %s", $errorText));
    }

    /**
     * print a text to screen with tag ERROR
     * @param string $errorText
     * @return void
     */
    public static function messageERROR(string $errorText): void
    {
        self::message(sprintf("[ERROR] %s", $errorText));
    }

    /**
     *  php _ops/lib replace-text-in-file "search text" "replace text" "file path"
     * required
     * - "search text"  (param 2)
     * - "replace text"  (param 3)
     * = "file path" ((param 4)
     * @return void
     */
    public static function replaceTextInFile(array $argv)
    {
// === validate ===
//    validate a message
        $searchText = $argv[2] ?? null;
        $replaceText = $argv[3] ?? null;
        $filePath = $argv[4] ?? null;
        if (!$searchText || is_null($replaceText) || !$filePath) {
            TextHelper::messageERROR("[PARAMS] missing a SEARCH TEXT or REPLACE TEXT or FILE PATH");
            exit(); // END
        }
        if (!is_file($filePath)) {
            TextHelper::messageERROR("$filePath does not exist");
            exit(); // END
        }

// === handle ===
        $oldText = file_get_contents($filePath);
        file_put_contents($filePath, str_replace($searchText, $replaceText, $oldText));
        $newText = file_get_contents($filePath);
//    validate result
        if ($oldText === $newText) {
            TextHelper::messageERROR("replace done with failed result");
        } else {
            TextHelper::messageSUCCESS("replace done with successful result");
        }

    }
}

// [REMOVED] namespace App\Helpers;

// [REMOVED] use App\Enum\GitHubEnum;
// [REMOVED] use App\Objects\Process;

class GitHubHelper
{
    /**
     * get current GitHub info, will return
     * [REMOTE_ORIGIN_URL, GITHUB_PERSONAL_TOKEN, USERNAME, REPOSITORY_NAME]
     *
     * @param string|null $remoteOriginUrl
     * @return array
     */
    public static function parseGitHub(string $remoteOriginUrl = null): array
    {
        $remoteOriginUrl = $remoteOriginUrl ?? self::getRemoteOriginUrl();
        return [
            $remoteOriginUrl,
            strpos($remoteOriginUrl, "@") !== false
                ? str_replace('https://', '', explode('@', $remoteOriginUrl)[0])
                : null,
            basename(str_replace(basename($remoteOriginUrl), '', $remoteOriginUrl)),
            basename(str_replace('.git', '', $remoteOriginUrl))
        ];
    }

    public static function getRemoteOriginUrl(): ?string
    {
        return exec(GitHubEnum::GET_REMOTE_ORIGIN_URL_COMMAND);
    }

    public static function getBranchUsingCommand(string $workDir): ?string
    {
        $process = (new Process(__FUNCTION__, $workDir, [
            GitHubEnum::GET_BRANCH_COMMAND
        ]))->execMultiInWorkDir()
            ->printOutput();
        return $process->getOutput() ? $process->getOutput()[count($process->getOutput()) - 1] : null;
    }

    /**
     * checking git already exist in this directory / folder
     * @param string $dirToCheck
     * @return bool
     */
    public static function isGit(string $dirToCheck): bool
    {
        return is_dir(sprintf("%s/.git", $dirToCheck));
    }

    public static function getRepositoryDirCommand(): string
    {
        return exec(GitHubEnum::GET_REPOSITORY_DIR_COMMAND);
    }

    /**
     * usage:
     *     php _ops/lib handle-caches-and-git REPOSITORY
     *
     * required:
     *     ENV > GITHUB_PERSONAL_ACCESS_TOKEN
     *
     * case engage-api-deploy, to build api docker image
     *     php _ops/lib_temp/HandleCachesAndGit ENGAGE_API_DEPLOY
     */
    public static function handleCachesAndGit(array $argv)
    {
        // === param ===
        $param2 = $argv[2] ?? null;
        $param3 = $argv[3] ?? null;
        // === validate ===
        //    validate env vars
        $repository = $param2 ?? getenv('REPOSITORY');
        $branch = $param3 ?? getenv('BRANCH');
        if ($repository === 'engage-api-deploy') {
            $branch = $param3 ?? getenv('API_DEPLOY_BRANCH');
        }
        $engagePlusCachesDir = getenv('ENGAGEPLUS_CACHES_DIR');
        $GitHubPersonalAccessToken = getenv('GITHUB_PERSONAL_ACCESS_TOKEN');

        if (!$repository || !$branch || !$engagePlusCachesDir || !$GitHubPersonalAccessToken) {
            TextHelper::messageERROR("[ENV] missing a BRANCH or BRANCH or ENGAGEPLUS_CACHES_DIR or GITHUB_PERSONAL_ACCESS_TOKEN");
            exit(); // END
        }

        $EngagePlusCachesRepositoryDir = sprintf("%s/%s", $engagePlusCachesDir, $repository);
        //     message validate
        TextHelper::message(sprintf("[%s] REPOSITORY = %s", $param2 ? 'CUSTOM' : 'ENV', $repository));
        TextHelper::message(sprintf("[%s] BRANCH = %s", $param3 ? 'CUSTOM' : 'ENV', $branch));
        TextHelper::message("DIR = '$EngagePlusCachesRepositoryDir'");

        // === handle ===
        //     var
        $remoteOriginUrl = sprintf("https://%s@github.com/%s/%s.git", $GitHubPersonalAccessToken, GitHubEnum::GITHUB_REPOSITORIES[$repository], $repository);
        TextHelper::messageTitle("Handle Caches and Git");
        //     case checkout
        if (is_dir(sprintf("%s/.git", $EngagePlusCachesRepositoryDir))) {
            TextHelper::message("The directory '$EngagePlusCachesRepositoryDir' exist, SKIP to handle git repository");
            //
            // case clone
        } else {
            TextHelper::messageERROR("The directory '$EngagePlusCachesRepositoryDir' does not exist, clone new repository");
            //
            (new Process("Remove old directory", null, [
                sprintf("rm -rf \"%s\"", $EngagePlusCachesRepositoryDir),
                sprintf("mkdir -p \"%s\"", $EngagePlusCachesRepositoryDir),
            ]))->execMulti()->printOutput();
            //
            (new Process("CLONE SOURCE CODE", $EngagePlusCachesRepositoryDir, [
                sprintf("git clone -b %s %s .", $branch, $remoteOriginUrl),
            ]))->execMultiInWorkDir(true)->printOutput();
        }
        // === update new code ===
        (new Process("UPDATE SOURCE CODE", $EngagePlusCachesRepositoryDir, [
            sprintf("git remote set-url origin %s", $remoteOriginUrl),
            GitHubEnum::RESET_BRANCH_COMMAND,
            sprintf("git checkout %s", $branch),
            GitHubEnum::PULL_COMMAND
        ]))->execMultiInWorkDir()->printOutput();
    }
}

// [REMOVED] namespace App\Helpers;

class ServicesHelper
{
    /**
     * php _ops/lib slack "a message"
     * @param array $argv
     * @return void
     */
    public static function SlackMessage(array $argv)
    {
        // === validate ===
        //    validate a message
        $message = $argv[2] ?? null;
        if (!$message) {
            TextHelper::messageERROR("missing a MESSAGE");
            exit(); // END
        }
        //    validate env vars
        $repository = getenv('REPOSITORY');
        $branch = getenv('BRANCH');
        $slackBotToken = getenv('SLACK_BOT_TOKEN');
        $slackChannel = getenv('SLACK_CHANNEL');
        if (!$repository || !$branch || !$slackBotToken || !$slackChannel) {
            TextHelper::messageERROR("[ENV] missing a BRANCH or REPOSITORY or SLACK_BOT_TOKEN or SLACK_CHANNEL");
            exit(); // END
        }

        // === handle ===
        $slackUrl = "https://slack.com/api/chat.postMessage";
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $slackUrl);
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_HTTPHEADER, [sprintf("Authorization: Bearer %s", $slackBotToken)]);
        curl_setopt($curl, CURLOPT_POSTFIELDS, http_build_query([
            "channel" => $slackChannel,
            "text" => sprintf("[%s] [%s] > %s", $repository, $branch, $message),
        ]));
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);  // Suppress output
        $response = curl_exec($curl);
        if (!$response) {
            TextHelper::messageERROR(curl_error($curl));
        } else {
            $responseCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
            if ($responseCode === 200) {
                if (json_decode($response, true)['ok']) {
                    TextHelper::messageSUCCESS("Message sent successfully | Slack status OK | HTTP code $responseCode");
                } else {
                    TextHelper::messageERROR(json_decode($response, true)['error'] . " | Slack status NO | HTTP code $responseCode");
                }
            } else {
                TextHelper::messageERROR("Error sending message | HTTP code $responseCode");
            }
        }

    }
}

// [REMOVED] namespace App\Helpers;

class AWSHelper
{
    /**
     * save to .env file or custom name
     * @return void
     */
    public static function getSecretEnv(string $secretName, string $customENVName = null)
    {
        $ENVName = $customENVName ?? '.env'; // default
        exec(sprintf("aws secretsmanager get-secret-value --secret-id %s --query SecretString --output text  > %s", $secretName, $ENVName));
        TextHelper::messageSUCCESS("get secret '$secretName' success and save at '$ENVName'");
    }

    /**
     * should run with command in shell:
     *      val "$(php _ops/lib load-env-ops)"
     *
     * @param string $SHELL_HANDLE_ENV_OPS_DATA_BASE64
     * @return string
     */
    public static function loadOpsEnvAndHandleMore(string $SHELL_HANDLE_ENV_OPS_DATA_BASE64): string
    {
        $opsEnvSecretName = 'env-ops';
        $opsEnvData = json_decode(exec(sprintf("aws secretsmanager get-secret-value --secret-id %s --query SecretString --output json", $opsEnvSecretName)));

        // case release code
        if ($SHELL_HANDLE_ENV_OPS_DATA_BASE64) {
            $shellData = base64_decode($SHELL_HANDLE_ENV_OPS_DATA_BASE64);
            //
            // case development
        } else {
            $shellData = file_get_contents('App/_shell_/handle-env-ops.sh');
        }
        //
        return sprintf("#!/bin/bash\n%s\n%s", $opsEnvData, $shellData);
    }
}

// [REMOVED] namespace App\Helpers;

// [REMOVED] use App\App;
// [REMOVED] use App\Objects\Release;
// [REMOVED] use App\Objects\Version;

class AppHelper
{
    /**
     * @param string $dirName
     * @return void
     */
    public static function requireOneAllPHPFilesInDir(string $dirName): void
    {
        $fullDirToScan = sprintf("%s/%s", DirHelper::getScriptDir(), $dirName);
        foreach (scandir($fullDirToScan) as $subDirName) {
            $fullSubDirToCheck = sprintf("%s/%s/%s", DirHelper::getScriptDir(), $dirName, $subDirName);
            if ($subDirName != '.' && $subDirName != '..' && is_dir($fullSubDirToCheck)) {
                $PHPFiles = glob("$fullSubDirToCheck/*.php");
                foreach ($PHPFiles as $PHPFile) {
                    require_once $PHPFile;
                }
                // check next
                AppHelper::requireOneAllPHPFilesInDir("$dirName/$subDirName");
            }
        }
    }

    /**
     * this will increase App:APP_VERSION
     * this will push new code to GitHub
     * @return void
     */
    public static function increaseVersion()
    {
        $appClassPath = Release::FILES_LIST[count(Release::FILES_LIST) - 1];
        $appClassContent = file_get_contents($appClassPath);
        foreach (explode(PHP_EOL, $appClassContent) as $line) {
           if(strpos($line, 'const APP_VERSION =') !== false){
               $line = sprintf("    const APP_VERSION = '%s';", Version::parse(App::APP_VERSION)->bump()->toString());
           }
           $newArr[] = $line;
        }
       file_put_contents($appClassPath, join(PHP_EOL, $newArr));
    }
}

// [REMOVED] namespace App\Objects;

// [REMOVED] use App\App;
// [REMOVED] use App\Enum\GitHubEnum;
// [REMOVED] use App\Helpers\AppHelper;
// [REMOVED] use App\Helpers\DEVHelper;
// [REMOVED] use App\Helpers\DirHelper;
// [REMOVED] use App\Helpers\TextHelper;
// [REMOVED] use DateTime;

class Release
{
    /**
     * @var array
     * to release
     */
    const FILES_LIST = [
        // === Enum ===
        'App/Enum/CommandEnum.php',
        'App/Enum/GitHubEnum.php',
        // === Helper ===
        'App/Helpers/DEVHelper.php',
        'App/Helpers/DirHelper.php',
        'App/Helpers/OpsHelper.php',
        'App/Helpers/TextHelper.php',
        'App/Helpers/GitHubHelper.php',
        'App/Helpers/ServicesHelper.php',
        'App/Helpers/AWSHelper.php',
        'App/Helpers/AppHelper.php',
        // === Objects ===
        'App/Objects/Release.php',
        'App/Objects/Process.php',
        'App/Objects/Version.php',
        // always on bottom
        'App/app.php',
    ];

    const RELEASE_PATH = '_ops/lib';

    public function __construct()
    {

    }

    /**
     *  null: validate OK
     *  string: error message
     * @return string|null
     */
    private function validate(): ?string
    {
        switch (basename(DirHelper::getScriptDir())) {
            case 'App':
                return null;
            case '_ops':
                return "[ERROR] in release directory \ another project, stop release job\n";
            default:
                return "[ERROR] unknown error\n";
        }
    }

    public function handle(): void
    {
        if ($this->validate()) {
            echo DEVHelper::message($this->validate(), __CLASS__, __FUNCTION__);
            return; // END
        }
        // handle
        //    increase app version
        AppHelper::increaseVersion();
        //    generate files
        echo DEVHelper::message("init ops/lib file\n", __CLASS__, __FUNCTION__);
        file_put_contents(self::RELEASE_PATH, sprintf("#!/usr/bin/env php\n\n// === %s ===\n", App::versionNew())); // init file
        $this->handleLibrariesClass();
        $this->handleAppClass();
        echo DEVHelper::message("DONE\n", __CLASS__, __FUNCTION__);
        //    push new release to GitHub
        (new Process("PUSH NEW RELEASE TO GITHUB", DirHelper::getWorkingDir(), [
            GitHubEnum::ADD_ALL_FILES_COMMAND,
            sprintf("git commit -m 'release %s on %s UTC'", App::versionNew(), (new DateTime())->format('Y-m-d H:i:s')),
            GitHubEnum::PUSH_COMMAND,
        ]))->execMultiInWorkDir()->printOutput();
        //
        TextHelper::messageSeparate();
        TextHelper::messageSUCCESS(sprintf("Release successful %s", App::versionNew()));
    }

    /**
     * remove tab 
     * remove namespace
     * remove some unused elements
     * @param string $classPath
     * @return string
     */
    private function handlePHPClassContent(string $classPath): string
    {
        // remove php tag
        $classContent = str_replace('', '', trim(file_get_contents($classPath)));
        // remove unused elements
        $lines = explode("\n", $classContent);
        $modifiedLines = [];
        foreach ($lines as $line) {
            // remove 'namespace'
            if (strpos($line, "namespace ") === 0) {
                $line = "// [REMOVED] " . $line;
            }
            // remove 'use'
            if (strpos($line, "use ") === 0) {
                $line = "// [REMOVED] " . $line;
            }
            $modifiedLines[] = $line;
        }
        return implode("\n", $modifiedLines);
    }

    /**
     * @return void
     */
    private
    function handleAppClass(): void
    {
        $appClassContent = $this->handlePHPClassContent(self::FILES_LIST[count(self::FILES_LIST) - 1]);
        $appClassContentClassOnly = sprintf("class App%s", explode('class App', $appClassContent)[1]);
        // handle shell data
        $appClassContentClassOnly = str_replace(
            "const SHELL_HANDLE_ENV_OPS_DATA_BASE64 = '';",
            sprintf("const SHELL_HANDLE_ENV_OPS_DATA_BASE64 = '%s';", base64_encode(file_get_contents("App/_shell_/handle-env-ops.sh"))),
            $appClassContentClassOnly
        );
        //
        file_put_contents(
            self::RELEASE_PATH,
            sprintf("\n// === Generated app class ===\n\n%s\n\n// === end Generated app class ===\n\n", $appClassContentClassOnly),
            FILE_APPEND
        ); // init file
    }

    /**
     * @return void
     */
    private
    function handleLibrariesClass(): void
    {
        $librariesClassesContent = "";
        for ($i = 0; $i < count(self::FILES_LIST) - 1; $i++) {
            $librariesClassesContent .= $this->handlePHPClassContent(self::FILES_LIST[$i]);
        }
        file_put_contents(
            self::RELEASE_PATH,
            sprintf("\n// === Generated libraries classes ===\n\n%s\n\n// === end Generated libraries classes ===\n\n", $librariesClassesContent),
            FILE_APPEND
        ); // init file
    }
}

// [REMOVED] namespace App\Objects;

// [REMOVED] use App\Enum\GitHubEnum;
// [REMOVED] use App\Helpers\TextHelper;

class Process
{
    /** @var string|null */
    private $workName;

    /** @var string|null */
    private $workDir;

    /** @var array|null */
    private $commands;

    /** @var array|null */
    private $output;

    /**
     * @param string|null $workName
     * @param string|null $workDir
     * @param array|null $commands
     */
    public function __construct(
        string $workName = null,
        string $workDir = null,
        array  $commands = null
    )
    {
        $this->workName = $workName;
        $this->workDir = $workDir;
        $this->commands = $commands;
    }

    /**
     * @return string|null
     */
    public function getWorkName(): ?string
    {
        return $this->workName;
    }

    /**
     * @param string|null $workName
     * @return Process
     */
    public function setWorkName(?string $workName): Process
    {
        $this->workName = $workName;
        return $this;
    }

    /**
     * @return string|null
     */
    public function getWorkDir(): ?string
    {
        return $this->workDir;
    }

    /**
     * @param string|null $workDir
     * @return Process
     */
    public function setWorkDir(?string $workDir): Process
    {
        $this->workDir = $workDir;
        return $this;
    }

    /**
     * @return array|null
     */
    public function getCommands(): ?array
    {
        return $this->commands;
    }

    /**
     * @param array|null $commands
     * @return Process
     */
    public function setCommands(?array $commands): Process
    {
        $this->commands = $commands;
        return $this;
    }

    /**
     * @return array|null
     */
    public function getOutput(): ?array
    {
        return $this->output;
    }

    /**
     * @param array|null $output
     * @return Process
     */
    public function setOutput(?array $output): Process
    {
        $this->output = $output;
        return $this;
    }

    // === UTILS ZONE ===

    public function execMulti(): Process
    {
        //
        if ($this->commands) {
            $resultCode = null;
            exec(join(';', $this->commands), $this->output, $resultCode);
        }
        //
        return $this;
    }

    public function execMultiInWorkDir(bool $skipCheckDir = false): Process
    {
        // dir commands
        $arrDirCommands[] = sprintf("cd '%s'", $this->workDir); // cd
        if (!$skipCheckDir) {
            $arrDirCommands[] = GitHubEnum::REPOSITORY_DIR_COMMAND; // check dir
        }
        $this->commands = array_merge($arrDirCommands, $this->commands);
        $this->execMulti();
        //
        return $this;
    }

    public function printOutput(): Process
    {
        TextHelper::message(sprintf("\n[WORK] %s", $this->workName));
        TextHelper::message("- Commands: ");
        if ($this->commands) {
            foreach ($this->commands as $command) {
                TextHelper::message(sprintf("    > %s", $command));
            }
        }
        TextHelper::message("- Output: ");
        if ($this->output) {
            foreach ($this->output as $outputLine) {
                TextHelper::message(sprintf("    + %s", $outputLine));
            }
        }
        //
        return $this;
    }

    // === END UTILS ZONE ===

}

// [REMOVED] namespace App\Objects;

// [REMOVED] use InvalidArgumentException;

/**
 * by BARD AI
 */
class Version
{
    /** @var int */
    private $major;
    /** @var int */
    private $minor;
    /** @var int */
    private $patch;
    /** @var int */
    private $build;

    public function __construct($major, $minor, $patch, $build = null)
    {
        $this->major = (int)$major;
        $this->minor = (int)$minor;
        $this->patch = (int)$patch;
        $this->build = (int)($build ?: 0);
    }

    public static function parse(string $versionStr): Version
    {
        $versionData = explode('.', trim($versionStr));
        return new Version($versionData[0], $versionData[1], $versionData[2]);
    }

    public function getMajor()
    {
        return $this->major;
    }

    public function getMinor()
    {
        return $this->minor;
    }

    public function getPatch()
    {
        return $this->patch;
    }

    public function getBuild()
    {
        return $this->build;
    }

    /**
     * return 1.0.0.0  (major.minor.patch.build)
     * @return string
     */
    public function toStringFull()
    {
        return $this->major . '.' . $this->minor . '.' . $this->patch . '.' . $this->build;
    }

    /**
     * return 1.0.0  (major.minor.patch)
     * @return string
     */
    public function toString(): string
    {
        return $this->major . '.' . $this->minor . '.' . $this->patch;
    }

    public function compare($otherVersion): int
    {
        if (!$otherVersion instanceof self) {
            throw new InvalidArgumentException('Argument must be an instance of Version');
        }

        if ($this->major < $otherVersion->major) {
            return -1;
        }

        if ($this->major > $otherVersion->major) {
            return 1;
        }

        if ($this->minor < $otherVersion->minor) {
            return -1;
        }

        if ($this->minor > $otherVersion->minor) {
            return 1;
        }

        if ($this->patch < $otherVersion->patch) {
            return -1;
        }

        if ($this->patch > $otherVersion->patch) {
            return 1;
        }

        if ($this->build < $otherVersion->build) {
            return -1;
        }

        if ($this->build > $otherVersion->build) {
            return 1;
        }

        return 0;
    }

    public function isCompatible($otherVersion)
    {
        if (!$otherVersion instanceof self) {
            throw new InvalidArgumentException('Argument must be an instance of Version');
        }

        return $this->compare($otherVersion) >= 0;
    }

    public function bump($part = 'patch'): Version
    {
        if (!in_array($part, ['major', 'minor', 'patch', 'build'])) {
            throw new InvalidArgumentException('Invalid version part');
        }
        if ($part === 'major') {
            $this->major++;
        }
        if ($part === 'minor') {
            $this->minor++;
        }
        if ($part === 'patch') {
            $this->patch++;
        }
        if ($part === 'build') {
            $this->build++;
        }
        return $this;
    }
}

// === end Generated libraries classes ===


// === Generated app class ===

class App
{
    const APP_NAME = 'OPS SHARED LIBRARY (PHP)';
    /**
     * 1.0: multiple files PHP and bash scripts
     * 2.0: combine 1 lib file, sync
     * 2.1: with test lib before ship
     * @var string
     */
    const APP_VERSION = '2.0.76';

    const SHELL_HANDLE_ENV_OPS_DATA_BASE64 = 'IyA9PT0gUkVRVUlSRUQ6IGdldCBlbnYtb3BzIGFuZCBhcHBlbmQgdG8gdGhpcyBmaWxlCgojID09PSBsb2FkIFJlcG9zaXRvcnkgSW5mbyA9PT0KZXhwb3J0IEJSQU5DSD0kKHBocCBfb3BzL2xpYiBicmFuY2gpCmV4cG9ydCBSRVBPU0lUT1JZPSQocGhwIF9vcHMvbGliIHJlcG9zaXRvcnkpCmV4cG9ydCBIRUFEX0NPTU1JVF9JRD0kKHBocCBfb3BzL2xpYiBoZWFkLWNvbW1pdC1pZCkKIyA9PT0gRU5EID09PQoKIyA9PT0gY29uc3RhbnRzID09PQpleHBvcnQgRE9DS0VSX0JBU0VfVEFHX1BST0RVQ1RJT049InByb2R1Y3Rpb24iCmV4cG9ydCBET0NLRVJfQkFTRV9UQUdfREVWRUxPUD0iZGV2ZWxvcCIKIyAgICBXQVJOSU5HOiBkZWxldGUgJ2F1dGguanNvbicgYWZ0ZXIgdXNlIHRoaXMgY29tbWFuZCAnQ09NUE9TRVJfQ09ORklHX0dJVEhVQl9UT0tFTicKZXhwb3J0IENPTVBPU0VSX0NPTkZJR19HSVRIVUJfVE9LRU49ImNvbXBvc2VyIGNvbmZpZyBnaXRodWItb2F1dGguZ2l0aHViLmNvbSAke0dJVEhVQl9QRVJTT05BTF9BQ0NFU1NfVE9LRU59IgpleHBvcnQgQ09NUE9TRVJfQ09ORklHX0FMTE9XX1BMVUdJTlNfU1lNRk9OWV9GTEVYPSJjb21wb3NlciBjb25maWcgLS1uby1wbHVnaW5zIGFsbG93LXBsdWdpbnMuc3ltZm9ueS9mbGV4IHRydWUiCmV4cG9ydCBDT01QT1NFUl9JTlNUQUxMX0RFVkVMT1A9ImNvbXBvc2VyIGluc3RhbGwiCmV4cG9ydCBDT01QT1NFUl9JTlNUQUxMX0RFVkVMT1BfVE9fQlVJTERfQ0FDSEVTPSJjb21wb3NlciBpbnN0YWxsIC0tbm8tYXV0b2xvYWRlciAtLW5vLXNjcmlwdHMgLS1uby1wbHVnaW5zIgpleHBvcnQgQ09NUE9TRVJfSU5TVEFMTF9QUk9EVUNUSU9OPSJjb21wb3NlciBpbnN0YWxsIC0tbm8tZGV2IC0tb3B0aW1pemUtYXV0b2xvYWRlciIKZXhwb3J0IENPTVBPU0VSX0lOU1RBTExfUFJPRFVDVElPTl9UT19CVUlMRF9DQUNIRVM9ImNvbXBvc2VyIGluc3RhbGwgLS1uby1kZXYgLS1uby1hdXRvbG9hZGVyIC0tbm8tc2NyaXB0cyAtLW5vLXBsdWdpbnMiCgojID09PSBlbmdhZ2UtYXBpLWRlcGxveSB2YXJzID09PQppZiBbICIke0JSQU5DSH0iID0gImRldmVsb3AiIF07IHRoZW4KICBleHBvcnQgRU5WPWRldgogIGV4cG9ydCBBUElfREVQTE9ZX0JSQU5DSD1kZXZlbG9wLW11bHRpLWNvbnRhaW5lcgogIGV4cG9ydCBFQl9FTlZJUk9OTUVOVF9OQU1FPSJkZXZlbG9wLW11bHRpLWNvbnRhaW5lciIKICBleHBvcnQgRU5WX1VSTF9QUkVGSVg9IiR7QlJBTkNIfS0iCiAgIwogIGV4cG9ydCBDT01QT1NFUl9JTlNUQUxMPSIke0NPTVBPU0VSX0lOU1RBTExfREVWRUxPUH0iCiAgZXhwb3J0IERPQ0tFUl9CQVNFX1RBRz0iJHtET0NLRVJfQkFTRV9UQUdfREVWRUxPUH0iCiAgZXhwb3J0IERPQ0tFUl9CQVNFX1RBR19BUEk9IiR7RE9DS0VSX0JBU0VfVEFHX0RFVkVMT1B9IiAjIG1heWJlIHJlbW92ZSBhZnRlciBlbWFpbC1zZXJ2aWNlCmZpCmlmIFsgIiR7QlJBTkNIfSIgPSAic3RhZ2luZyIgXTsgdGhlbgogIGV4cG9ydCBFTlY9c3RnCiAgZXhwb3J0IEFQSV9ERVBMT1lfQlJBTkNIPXN0YWdpbmctbXVsdGktY29udGFpbmVyCiAgZXhwb3J0IEVCX0VOVklST05NRU5UX05BTUU9InN0YWdpbmctbXVsdGktY29udGFpbmVyIgogIGV4cG9ydCBFTlZfVVJMX1BSRUZJWD0iJHtCUkFOQ0h9LSIKICAjCiAgZXhwb3J0IENPTVBPU0VSX0lOU1RBTEw9IiR7Q09NUE9TRVJfSU5TVEFMTF9QUk9EVUNUSU9OfSIKICBleHBvcnQgRE9DS0VSX0JBU0VfVEFHPSIke0RPQ0tFUl9CQVNFX1RBR19QUk9EVUNUSU9OfSIKICBleHBvcnQgRE9DS0VSX0JBU0VfVEFHX0FQST0iJHtET0NLRVJfQkFTRV9UQUdfREVWRUxPUH0iICMgbWF5YmUgcmVtb3ZlIGFmdGVyIGVtYWlsLXNlcnZpY2UKZmkKaWYgWyAiJHtCUkFOQ0h9IiA9ICJtYXN0ZXIiIF07IHRoZW4KICBleHBvcnQgRU5WPXByZAogIGV4cG9ydCBBUElfREVQTE9ZX0JSQU5DSD1tYXN0ZXItbXVsdGktY29udGFpbmVyCiAgZXhwb3J0IEVCX0VOVklST05NRU5UX05BTUU9ImVuZ2FnZXBsdXMtcHJvZC1tdWx0aS1jb250YWluZXIiCiAgZXhwb3J0IEVOVl9VUkxfUFJFRklYPSIiCiAgIwogIGV4cG9ydCBDT01QT1NFUl9JTlNUQUxMPSIke0NPTVBPU0VSX0lOU1RBTExfUFJPRFVDVElPTn0iCiAgZXhwb3J0IERPQ0tFUl9CQVNFX1RBRz0iJHtET0NLRVJfQkFTRV9UQUdfUFJPRFVDVElPTn0iCiAgZXhwb3J0IERPQ0tFUl9CQVNFX1RBR19BUEk9IiR7RE9DS0VSX0JBU0VfVEFHX1BST0RVQ1RJT059IiAjIG1heWJlIHJlbW92ZSBhZnRlciBlbWFpbC1zZXJ2aWNlCmZpCiMgPT09IEVORCA9PT0KCiMgPT09IEFXUyBBY2NvdW50IGNvbmZpZ3VyYXRpb24gPT09CmV4cG9ydCBBV1NfQUNDT1VOVF9JRD0iOTgyMDgwNjcyOTgzIgpleHBvcnQgUkVHSU9OPSJhcC1lYXN0LTEiCiMgICAgRUNSIGNvbmZpZ3VyYXRpb24KIyAgICAgICAgYmFzZSBhbmQgY2FjaGVzIHJlcG9zaXRvcmllcwpleHBvcnQgRUNSX1JFUE9fQVBJX0JBU0U9IiR7QVdTX0FDQ09VTlRfSUR9LmRrci5lY3IuJHtSRUdJT059LmFtYXpvbmF3cy5jb20vZW5nYWdlcGx1cy1iYXNlLWFwaS1yZXBvc2l0b3J5IgpleHBvcnQgRUNSX1JFUE9fUEFZTUVOVF9TRVJWSUNFX0JBU0U9IiR7QVdTX0FDQ09VTlRfSUR9LmRrci5lY3IuJHtSRUdJT059LmFtYXpvbmF3cy5jb20vZW5nYWdlcGx1cy1iYXNlLXBheW1lbnQtc2VydmljZS1yZXBvc2l0b3J5IgpleHBvcnQgRUNSX1JFUE9fSU5WT0lDRV9TRVJWSUNFX0JBU0U9IiR7QVdTX0FDQ09VTlRfSUR9LmRrci5lY3IuJHtSRUdJT059LmFtYXpvbmF3cy5jb20vZW5nYWdlcGx1cy1iYXNlLWludm9pY2Utc2VydmljZS1yZXBvc2l0b3J5IgpleHBvcnQgRUNSX1JFUE9fSU5URUdSQVRJT05fQVBJX0JBU0U9IiR7QVdTX0FDQ09VTlRfSUR9LmRrci5lY3IuJHtSRUdJT059LmFtYXpvbmF3cy5jb20vZW5nYWdlcGx1cy1iYXNlLWludGVncmF0aW9uLWFwaS1yZXBvc2l0b3J5IgpleHBvcnQgRUNSX1JFUE9fRU1BSUxfU0VSVklDRV9CQVNFPSIke0FXU19BQ0NPVU5UX0lEfS5ka3IuZWNyLiR7UkVHSU9OfS5hbWF6b25hd3MuY29tL2VuZ2FnZXBsdXMtYmFzZS1lbWFpbC1zZXJ2aWNlLXJlcG9zaXRvcnkiCiMgICAgICAgIG5vcm1hbCByZXBvc2l0b3JpZXMKZXhwb3J0IEVDUl9SRVBPX0FQST0iJHtBV1NfQUNDT1VOVF9JRH0uZGtyLmVjci4ke1JFR0lPTn0uYW1hem9uYXdzLmNvbS9lbmdhZ2VwbHVzLSR7RU5WfS1hcGktcmVwb3NpdG9yeSIKZXhwb3J0IEVDUl9SRVBPX1BBWU1FTlRfU0VSVklDRT0iJHtBV1NfQUNDT1VOVF9JRH0uZGtyLmVjci4ke1JFR0lPTn0uYW1hem9uYXdzLmNvbS9lbmdhZ2VwbHVzLSR7RU5WfS1wYXltZW50LXNlcnZpY2UtcmVwb3NpdG9yeSIKZXhwb3J0IEVDUl9SRVBPX0lOVk9JQ0VfU0VSVklDRT0iJHtBV1NfQUNDT1VOVF9JRH0uZGtyLmVjci4ke1JFR0lPTn0uYW1hem9uYXdzLmNvbS9lbmdhZ2VwbHVzLSR7RU5WfS1pbnZvaWNlLXNlcnZpY2UtcmVwb3NpdG9yeSIKZXhwb3J0IEVDUl9SRVBPX0lOVEVHUkFUSU9OX0FQST0iJHtBV1NfQUNDT1VOVF9JRH0uZGtyLmVjci4ke1JFR0lPTn0uYW1hem9uYXdzLmNvbS9lbmdhZ2VwbHVzLSR7RU5WfS1pbnRlZ3JhdGlvbi1hcGktcmVwb3NpdG9yeSIKZXhwb3J0IEVDUl9SRVBPX0VNQUlMX1NFUlZJQ0U9IiR7QVdTX0FDQ09VTlRfSUR9LmRrci5lY3IuJHtSRUdJT059LmFtYXpvbmF3cy5jb20vZW5nYWdlcGx1cy0ke0VOVn0tZW1haWwtc2VydmljZS1yZXBvc2l0b3J5IgojICAgIEVsYXN0aWMgQmVhbnN0YWxrIGNvbmZpZ3VyYXRpb24KZXhwb3J0IFMzX0VCX0FQUF9WRVJTSU9OX0JVQ0tFVF9OQU1FPSJlbGFzdGljYmVhbnN0YWxrLSR7UkVHSU9OfS0ke0FXU19BQ0NPVU5UX0lEfSIKZXhwb3J0IEVCX0FQUF9WRVJTSU9OX0ZPTERFUl9OQU1FPSJlbmdhZ2VwbHVzIgpleHBvcnQgRUJfQVBQX05BTUU9ImVuZ2FnZXBsdXMiCiMgPT09IEVORCA9PT0KCiMgPT09IEVuZ2FnZVBsdXMgY29uZmlndXJhdGlvbiA9PT0KZXhwb3J0IEVOR0FHRVBMVVNfQ0FDSEVTX0ZPTERFUj0iLmNhY2hlc19lbmdhZ2VwbHVzIgpleHBvcnQgRU5HQUdFUExVU19DQUNIRVNfRElSPSIkKHBocCBfb3BzL2xpYiBob21lLWRpcikvJHtFTkdBR0VQTFVTX0NBQ0hFU19GT0xERVJ9IgpleHBvcnQgRU5HQUdFUExVU19DQUNIRVNfUkVQT1NJVE9SWV9ESVI9IiR7RU5HQUdFUExVU19DQUNIRVNfRElSfS8ke1JFUE9TSVRPUll9IgojID09PSBFTkQgPT09CgojID09PSBnZXQgREVWSUNFIGZyb20gcGFyYW0gMSA9PT0KZXhwb3J0IERFVklDRT0iJDEiCiMgPT09IEVORCA9PT0K';

    public function __construct()
    {

    }

    public function run(array $argv)
    {
        // === params ===
        $command = $argv[1] ?? null;
        $param1 = $argv[2] ?? null; // to use if needed
        $param2 = $argv[3] ?? null; // to use if needed

        // === validation ===
        if (!$command) {
            echo "[ERROR] missing command, should be 'php _ops/LIB COMMAND'\n";
            $this->help();
            exit(); // END
        }
        if (!array_key_exists($command, CommandEnum::SUPPORT_COMMANDS)) {
            echo sprintf("[ERROR] do not support this command '%s'\n", $command);
            $this->help();
            exit(); // END
        }

        // === handle ===
        switch ($command) {
            // === this app ===
            case CommandEnum::HELP:
                $this->help();
                break;
            case CommandEnum::RELEASE:
                (new Release())->handle();
                break;
            case CommandEnum::VERSION:
                TextHelper::message(App::version());
                break;
            case CommandEnum::SYNC:
                OpsHelper::sync(self::SHELL_HANDLE_ENV_OPS_DATA_BASE64);
                break;
            // === AWS related ===
            case CommandEnum::LOAD_ENV_OPS:
                echo AWSHelper::loadOpsEnvAndHandleMore(self::SHELL_HANDLE_ENV_OPS_DATA_BASE64);
                break;
            case CommandEnum::GET_SECRET_ENV:
                // validate
                if (!$param1) {
                    TextHelper::messageERROR("required secret name");
                    exit(); // END
                }
                // handle
                AWSHelper::getSecretEnv($param1, $param2);
                break;
            // === ops ===
            case CommandEnum::BRANCH:
                echo exec(GitHubEnum::GET_BRANCH_COMMAND);
                break;
            case  CommandEnum::REPOSITORY:
                echo basename(str_replace('.git', '', exec(GitHubEnum::GET_REMOTE_ORIGIN_URL_COMMAND)));
                break;
            case CommandEnum::HEAD_COMMIT_ID:
                echo exec(GitHubEnum::GET_HEAD_COMMIT_ID_COMMAND);
                break;
            case CommandEnum::HOME_DIR:
                echo DirHelper::getHomeDir();
                break;
            case  CommandEnum::SCRIPT_DIR:
                echo DirHelper::getScriptDir();
                break;
            case CommandEnum::WORKING_DIR:
                echo DirHelper::getWorkingDir();
                break;
            case CommandEnum::REPLACE_TEXT_IN_FILE:
                TextHelper::replaceTextInFile($argv);
                break;
            case CommandEnum::HANDLE_CACHES_AND_GIT:
                GitHubHelper::handleCachesAndGit($argv);
                break;
            case CommandEnum::SLACK:
                ServicesHelper::SlackMessage($argv);
                break;
            // === private ===
            case CommandEnum::GET_S3_WHITE_LIST_IPS_DEVELOPMENT:
                echo OpsHelper::getS3WhiteListIpsDevelopment();
                break;
            case CommandEnum::UPDATE_GITHUB_TOKEN_ALL_PROJECT:
                OpsHelper::updateGitHubTokenAllProjects();
                break;
            default:
                echo "[ERROR] Unknown error";
                break;
        }
    }

    private function help()
    {
        TextHelper::message();
        TextHelper::messageTitle(sprintf("%s v%s", self::APP_NAME, self::APP_VERSION));
        echo "[INFO] usage:  php _ops/lib COMMAND  \n";
        echo "               php _ops/lib COMMAND PARAM_1 \n\n";
        echo "[INFO] Support commands:\n";
        foreach (CommandEnum::SUPPORT_COMMANDS as $command => $description) {
            echo sprintf(" +    %s    :  %s\n", $command, $description);
        }
        echo "\n===\n\n";
    }

    public static function version(): string
    {
        return sprintf("%s v%s", self::APP_NAME, self::APP_VERSION);
    }

    // guess a new version

    public static function versionNew(): string
    {
        return sprintf("%s v%s", self::APP_NAME, Version::parse(self::APP_VERSION)->bump()->toString());
    }
}

// === end class zone ====

// === execute zone ===
(new App())->run($argv);
// === end execute zone ===

// === end Generated app class ===


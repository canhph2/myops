#!/usr/bin/env php
<?php

namespace app;

require_once 'app/Helpers/AppHelper.php';
require_once 'app/Helpers/DIR.php';

// === class zone ====
use app\Enum\CommandEnum;
use app\Enum\GitHubEnum;
use app\Enum\IconEnum;
use app\Enum\IndentLevelEnum;
use app\Enum\TagEnum;
use app\Helpers\AppHelper;
use app\Helpers\AWS;
use app\Helpers\DIR;
use app\Helpers\DOCKER;
use app\Helpers\GITHUB;
use app\Helpers\OPS;
use app\Helpers\SERVICE;
use app\Helpers\TEXT;
use app\Objects\Release;
use app\Objects\Version;

AppHelper::requireOneAllPHPFilesInDir(DIR::getWorkingDir('app'));

class app
{
    const APP_NAME = 'OPS SHARED LIBRARY (PHP)';
    /**  @var string */
    const APP_VERSION = '2.15.3';

    const SHELL_DATA_BASE_64 = '';

    public static function getShellData()
    {
        return self::SHELL_DATA_BASE_64
            ? base64_decode(self::SHELL_DATA_BASE_64)
            : file_get_contents('app/_shell_/handle-env-ops.sh');
    }

    const ELB_TEMPLATE_BASE_64 = '';

    public static function getELBTemplate()
    {
        return self::ELB_TEMPLATE_BASE_64
            ? json_decode(base64_decode(self::ELB_TEMPLATE_BASE_64), true)
            : [
                'blockdeviceTemplate' => file_get_contents('app/_AWS_/ELB-template/.ebextensions/blockdevice-xvdcz.config.TEMPLATE'),
                'DockerrunTemplate' => file_get_contents('app/_AWS_/ELB-template/Dockerrun.aws.json.TEMPLATE'),
            ];
    }

    public function __construct()
    {

    }

    public function run(array $argv)
    {
        // === params ===
        $command = $argv[1] ?? null;
        $param1 = $argv[2] ?? null; // to use if needed
        $param2 = $argv[3] ?? null; // to use if needed

        // === validation ===
        if (!$command) {
            echo "[ERROR] missing command, should be 'php _ops/lib COMMAND'\n";
            $this->help();
            exit(); // END
        }
        if (!array_key_exists($command, CommandEnum::SUPPORT_COMMANDS)) {
            echo sprintf("[ERROR] do not support this command '%s'\n", $command);
            $this->help();
            exit(); // END
        }

        // === handle ===
        switch ($command) {
            // === this app ===
            case CommandEnum::HELP:
                $this->help();
                break;
            case CommandEnum::RELEASE:
                (new Release())->handle($argv);
                break;
            case CommandEnum::VERSION:
                TEXT::new()->message(app::version());
                break;
            case CommandEnum::SYNC:
                OPS::sync();
                break;
            // === AWS related ===
            case CommandEnum::LOAD_ENV_OPS:
                echo AWS::loadOpsEnvAndHandleMore();
                break;
            case CommandEnum::GET_SECRET_ENV:
                // validate
                if (!$param1) {
                    TEXT::tagMultiple([TagEnum::VALIDATION, TagEnum::ERROR, TagEnum::PARAMS])
                        ->message("required secret name");
                    exit(); // END
                }
                // handle
                AWS::getSecretEnv($param1, $param2);
                break;
            case CommandEnum::ELB_UPDATE_VERSION:
                AWS::ELBUpdateVersion();
                break;
            // === git ===
            case CommandEnum::BRANCH:
                echo exec(GitHubEnum::GET_BRANCH_COMMAND);
                break;
            case  CommandEnum::REPOSITORY:
                echo basename(str_replace('.git', '', exec(GitHubEnum::GET_REMOTE_ORIGIN_URL_COMMAND)));
                break;
            case CommandEnum::HEAD_COMMIT_ID:
                echo exec(GitHubEnum::GET_HEAD_COMMIT_ID_COMMAND);
                break;
            case CommandEnum::HANDLE_CACHES_AND_GIT:
                GITHUB::handleCachesAndGit($argv);
                break;
            // === Docker ===
            case CommandEnum::DOCKER_KEEP_IMAGE_BY:
                DOCKER::keepImageBy($argv);
                break;
            // === utils ===
            case CommandEnum::HOME_DIR:
                echo DIR::getHomeDir();
                break;
            case  CommandEnum::SCRIPT_DIR:
                echo DIR::getScriptDir();
                break;
            case CommandEnum::WORKING_DIR:
                echo DIR::getWorkingDir();
                break;
            case CommandEnum::REPLACE_TEXT_IN_FILE:
                TEXT::replaceTextInFile($argv);
                break;
            case CommandEnum::SLACK:
                SERVICE::SlackMessage($argv);
                break;
            case CommandEnum::TMP:
                DIR::tmp($argv);
                break;
            case CommandEnum::POST_WORK:
                OPS::postWork();
                break;
            // === private ===
            case CommandEnum::GET_S3_WHITE_LIST_IPS_DEVELOPMENT:
                echo OPS::getS3WhiteListIpsDevelopment();
                break;
            case CommandEnum::UPDATE_GITHUB_TOKEN_ALL_PROJECT:
                OPS::updateGitHubTokenAllProjects();
                break;
            // === validation ===
            case CommandEnum::VALIDATE:
                OPS::validate($argv);
                break;
            // === other ===
            default:
                echo "[ERROR] Unknown error";
                break;
        }
    }

    private function help()
    {
        TEXT::new()->message('')
            ->messageTitle("%s v%s", self::APP_NAME, self::APP_VERSION)
            ->setTag(TagEnum::INFO)->message("usage:  php _ops/lib COMMAND")
            ->setTag(TagEnum::NONE)->message("               php _ops/lib COMMAND PARAM1 PARAM2 ...")
            ->setTag(TagEnum::NONE)->message('')
            ->setTag(TagEnum::INFO)->message("Support commands:");
        /**
         * @var  $command string
         * @var  $descriptionArr array
         */
        foreach (CommandEnum::SUPPORT_COMMANDS as $command => $descriptionArr) {
            switch (count($descriptionArr)) {
                case 0: // group command's title
                    TEXT::new()->messageSubTitle($command);
                    break;
                case 1: // group command's items - single line description
                    TEXT::indent(IndentLevelEnum::SUB_ITEM_LINE)->setIcon(IconEnum::HYPHEN)
                        ->message("%s     : %s", $command, $descriptionArr[0]);
                    break;
                default: // group command's items - multiple line description
                    TEXT::indent(IndentLevelEnum::SUB_ITEM_LINE)->setIcon(IconEnum::HYPHEN)->message($command);
                    foreach ($descriptionArr as $descriptionLine) {
                        TEXT::indent(IndentLevelEnum::LEVEL_3)->setIcon(IconEnum::DOT)->message($descriptionLine);
                    }
                    break;
            }
        }
        TEXT::new()->messageSeparate();
    }

    public static function version(Version $newVersion = null): string
    {
        return sprintf(
            "%s v%s",
            self::APP_NAME,
            $newVersion ? $newVersion->toString() : self::APP_VERSION
        );
    }
}

// === end class zone ====

// === execute zone ===
(new app())->run($argv);
// === end execute zone ===
